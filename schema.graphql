enum Period {
  hourly
  daily
  weekly
  total
}

type OptionContract @entity {
  id: String!
  address: Bytes!
  config: ConfigContract!
  token0: String!
  token1: String!
  isPaused: Boolean!
  poolContract: Bytes!
  routerContract: Bytes!
  openUp: BigInt!
  openDown: BigInt!
  openInterestUp: BigInt!
  openInterestDown: BigInt!
  # payoutForUp: BigInt
  # payoutForDown: BigInt
}

type Market @entity {
  id: Bytes!
  skew: BigInt!
  strike: BigInt
  expiration: BigInt
  optionContract: OptionContract
  marketId: Bytes!
}

type ConfigContract @entity {
  id: String!
  address: Bytes!
  # minFee: BigInt!
  # maxFee: BigInt!
  # minPeriod: BigInt!
  # maxPeriod: BigInt!
  maxSkew: BigInt!
  creationWindowContract: Bytes!
  circuitBreakerContract: Bytes!
  iv: BigInt!
  # ivFactorITM: BigInt!
  # ivFactorOTM: BigInt!
  optionStorageContract: Bytes!
  platformFee: BigInt!
  payout: BigInt!
  sfdContract: Bytes!
  sf: BigInt!
  traderNFTContract: Bytes!
  stepSize: BigInt!
}

type VolumePerContract @entity {
  id: String!
  amount: BigInt!
  period: Period!
  timestamp: BigInt!
  optionContract: OptionContract!
  settlementFee: BigInt!
}

type QueuedOptionData @entity {
  id: String!
  optionContract: OptionContract!
  strike: BigInt
  user: Bytes
  state: Int
  isAbove: Boolean
  queueID: BigInt
  # slippage: BigInt
  depositToken: String
  reason: String
  queueTimestamp: BigInt!
  cancelTimestamp: BigInt!
  lag: BigInt!
  maxFeePerContract: BigInt!
  processTime: BigInt!
  expirationTime: BigInt
  numberOfContracts: BigInt!
  totalFee: BigInt!
}

type UserOptionData @entity {
  id: String!
  optionContract: OptionContract!
  optionID: BigInt
  strike: BigInt
  totalFee: BigInt!
  user: Bytes!
  creationTime: BigInt!
  queuedTimestamp: BigInt!
  expirationPrice: BigInt
  payout: BigInt
  state: Int
  amount: BigInt!
  expirationTime: BigInt
  isAbove: Boolean
  queueID: BigInt
  settlementFee: BigInt!
  lag: BigInt!
}

type User @entity {
  id: Bytes!
  address: Bytes!
}

type UserStat @entity {
  id: ID!
  uniqueCount: Int!
  uniqueCountCumulative: Int!
  period: Period!
  timestamp: BigInt
  existingCount: Int!
  users: [User!]!
}

type DailyUserStat @entity {
  id: String!
}
